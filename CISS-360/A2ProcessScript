#!/bin/bash                                                                        
 
#Joshua Stuifbergen
#Assignment 2 Process Script
#CISS 360
#2/3/19

#This script looks through the /proc directory, and extracts information and
#displays it in a presentable manner. The user can look at individual processes
#or find which processes share the amount of threads.

echo "-----------A2 Process Script-----------" >&2
echo >&2

#This function has a collection of variable extracting pieces of information from #the /proc/stat and /proc/comm directory
PIDinfo(){
		PIDnum=$(cat stat | awk '{print $1}')
		PIDname=$(cat comm)
		PIDstate=$(cat stat | awk '{print $3}')
		PIDsize=$(cat stat | awk '{print $23}')
		PIDthread=$(cat stat | awk '{print $20}')
}	

#This function has a collection of variable extracting pieces of information from #the /proc/stat and /proc/comm directory and prints it out to stdrr
PIDinfoPrint(){
	echo "PID#   State Name             Memory     Thread"
	for curDir in /proc/[1-9]*/; do
		cd $curDir
		PIDnum=$(cat stat | awk '{print $1}')
		PIDname=$(cat comm)
		PIDstate=$(cat stat | awk '{print $3}')
		PIDsize=$(cat stat | awk '{print $23}')
		PIDthread=$(cat stat | awk '{print $20}')
		printf "%-6s %-5s %-16s %-10s %-5s \n" $PIDnum $PIDstate $PIDname 			$PIDsize $PIDthread;
	done
}

HelpMenu(){
	echo >&2
	echo "-----------------------Help Menu-----------------------"
	echo "Follow the instructions below:"
	echo >&2
	echo "Enter a Process ID number to view more information about it."
	echo "./A2ProcessScript [PID#] [PIDthread]" >&2
	echo >&2
	echo "Enter a Process ID number followed by a Thread number to view 
the Process ID, and Processes with the same Thread count."
	echo "./A2ProcessScript [PID#] [PIDthread#]" >&2
	echo >&2
	echo "Enter './A2ProcessScript --help' for assistance" >&2
	echo "Enter './A2ProcessScript showPID' to show all PID #'s" >&2
	echo "Enter './A2ProcessScript showAll' to view Processes" >&2
	perror -v $?
	exit 1	
}

#Help menu appears if the user needs further assistance by entering '--help'
if [ "$1" == "--help" ]; then 
	HelpMenu
	exit 0

#The user enters two integer arguements. The first is the PID number and second is the thread number.
#The value must be an integer and between 0 and 99999.
elif [[ "$1" =~ ^[0-9]+$ ]] && [ "$1" -ge 0 -a "$1" -le 99999 ] && [[ "$2" =~ ^[0-9]+$ ]] && [ "$2" -ge 0 -a "$2" -le 99999 ]; then
	echo "PID#   State Name             Memory     Thread"
	for curDir in /proc/[1-9]*/; do
		cd $curDir
		testPIDnum=$(cat stat | awk '{print $1}') 
		testPIDthread=$(cat stat | awk '{print $20}')
		if [ "$2" == "$testPIDthread" ]; then
			PIDinfo		
			printf "%-6s %-5s %-16s %-10s %-5s \n" $PIDnum $PIDstate $PIDname 				$PIDsize $PIDthread;	
			if [ "$1" == "$testPIDnum" ]; then
				PIDinfo
				echo >&2
				echo "-------PID's With The Same Thread Amount-------" >&2
				echo "PID#   State Name             Memory     Thread" >&2
				printf "%-6s %-5s %-16s %-10s %-5s \n" $PIDnum $PIDstate $PIDname 					$PIDsize $PIDthread;		
			fi
		fi
	done
	echo "exit" $? >&2
	exit 0
	
#Prints PID information of the number entered.
elif [[ "$1" =~ ^[0-9]+$ ]] && [ "$1" -ge 0 -a "$1" -le 99999 ] && [ -z "$2" ]; then
	echo "PID#   State Name             Memory     Thread" >&2
	for curDir in /proc/[1-9]*/; do
		cd $curDir
		testPIDnum=$(cat stat | awk '{print $1}') 
			if [ "$1" == "$testPIDnum" ]; then
				PIDinfo
				echo  >&2
				printf "%-6s %-5s %-16s %-10s %-5s \n" $PIDnum $PIDstate $PIDname 					$PIDsize $PIDthread;	
			fi
	done
	echo "exit" $? >&2
	exit 0

#Displays all the PID #s in numerical order
elif [ "$1" == "showPID" ]; then
	cd /proc
	ls -dv [1-9]*
	echo "exit" $? >&2
	exit 0

#Displays PID#s in with information such as name, state, size, and thread number.
elif [ "$1" == "showAll" ]; then
	PIDinfoPrint 
	echo "exit" $? >&2
	exit 0

#If the arguement is not an integer or not one of the specified worded arguements
#then it prints to HelpMenu
elif ! [[ "$1" =~ ^[0-9]+$ ]] || ! [[ "$2" =~ ^[0-9]+$ ]]; then 
	echo "ERROR: Arguement other than an integer" >&2
	HelpMenu

#If the user leaves arg1 empty a help menu appears.
elif [ -z "$1" ]; then 
	echo "ERROR: Empty Arguement" >&2
	HelpMenu		
fi
